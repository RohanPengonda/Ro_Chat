// Main_Page.tsx
"use client";
import React, { useState } from "react";

import Sidebar from "./Sidebar";
import Sidebar_Right from "./Sidebar_Right";
import Header from "./Header";
import ChatCard from "./ChatCard";
import ChatArea from "./ChatArea";

interface Message {
  text: string;
  timestamp: string;
  sender: "You" | "Customer";
}

interface Customer {
  id: number;
  name: string;
  messages: Message[];
}

function getTime(): string {
  return new Date().toLocaleTimeString([], {
    hour: "2-digit",
    minute: "2-digit",
  });
}

const Main_Page = () => {
  const [customers, setCustomers] = useState<Customer[]>([
    {
      id: 1,
      name: "Customer 1",
      messages: [
        { text: "hi", timestamp: getTime(), sender: "Customer" },
        { text: "hello", timestamp: getTime(), sender: "Customer" },
        { text: "Gm", timestamp: getTime(), sender: "Customer" },
      ],
    },
    { id: 2, name: "Customer 2", messages: [] },
  ]);

  const [selectedCustomer, setSelectedCustomer] = useState<Customer>(
    customers[0]
  );

  const handleSendMessage = (messageText: string) => {
    const message: Message = {
      text: messageText,
      timestamp: getTime(),
      sender: "You",
    };

    const updatedCustomers = customers.map((customer) =>
      customer.id === selectedCustomer.id
        ? { ...customer, messages: [...customer.messages, message] }
        : customer
    );

    setCustomers(updatedCustomers);
    setSelectedCustomer(
      updatedCustomers.find((c) => c.id === selectedCustomer.id) as Customer
    );
  };

  return (
    <div className="flex h-screen">
      {/* First Section - Sidebar */}
      <section className="w-15">
        <Sidebar />
      </section>

      {/* Main Section */}
      <div className="flex flex-col flex-1">
        {/* Top Header */}
        <section className="">
          <Header />
        </section>

        {/* Content Below Header */}
        <div className="flex flex-1">
          {/* Contacts */}
          <section className=" w-1/3 border border-gray-100">
            <ChatCard
              customers={customers}
              selectedCustomer={selectedCustomer}
              setSelectedCustomer={setSelectedCustomer}
            />{" "}
          </section>

          {/* Chat */}
          <section className="flex-1">
            {" "}
            <ChatArea
              customer={selectedCustomer}
              onSendMessage={handleSendMessage}
            />
          </section>
          {/* Right Sidebar */}
          <section className="w-14">
            <Sidebar_Right />
          </section>
        </div>
      </div>
    </div>
  );
};

export default Main_Page;


// ChatArea.jsx

// "use client";
import React, { useState } from "react";
import Image from "next/image";
import { IoSend } from "react-icons/io5";
import { FiPaperclip, FiSmile, FiClock, FiAlignRight } from "react-icons/fi";
import { PiClockClockwiseFill } from "react-icons/pi";
import { HiOutlineSparkles } from "react-icons/hi";
import { FaMicrophone } from "react-icons/fa";
import { IoIosSearch } from "react-icons/io";
import { HiSparkles } from "react-icons/hi";
import { CgProfile } from "react-icons/cg";

interface Message {
  text: string;
  timestamp: string;
  sender: "You" | "Customer";
}

interface Customer {
  id: number;
  name: string;
  messages: Message[];
}

interface ChatAreaProps {
  customer: Customer;
  onSendMessage: (message: string) => void;
}

const ChatArea = ({ customer, onSendMessage }: ChatAreaProps) => {
  const [newMessage, setNewMessage] = useState<string>("");

  const handleSend = () => {
    if (newMessage.trim() !== "") {
      onSendMessage(newMessage);
      setNewMessage("");
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="flex-1 flex flex-col justify-between bg-gray-50 border rounded border-gray-200 h-160 pb-2 overflow-y-scroll">
      <div className="flex justify-between p-3 font-semibold border-b-1 border-gray-300 shadow-md">
        <div className="flex space-x-2">
          <CgProfile size={25} className="mr-2 text-gray-800" />
          {customer.name}
        </div>
        <div className="flex gap-2 ">
          <HiSparkles size={20} className="" />
          <IoIosSearch size={20} />
        </div>
      </div>
      <div className="flex-1 p-4 space-y-2 overflow-y-auto scrollbar-hide">
        {customer.messages.length > 0 ? (
          customer.messages.map((msg, idx) => (
            <div key={idx} className="mb-2">
              <div
                key={idx}
                className={`mb-3 flex ${
                  msg.sender === "You" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-xs break-all rounded px-3 py-2 shadow-md ${
                    msg.sender === "You"
                      ? "bg-green-200 text-right"
                      : "bg-gray-100 text-left"
                  }`}
                >
                  <div className="flex justify-between">
                    <span className="text-sm font-bold border-b-1 border-gray-400">
                      {msg.sender}
                    </span>
                  </div>
                  <div className=" rounded inline-block text-left">
                    {msg.text}
                    <div className=" flex justify-end text-[10px] text-gray-500 ">
                      {msg.timestamp}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <p className="text-gray-400 text-sm text-center">No messages yet.</p>
        )}
      </div>
      <div>
        <div className="flex items-center justify-between border-t px-4 py-2 bg-white">
          {/* Message and Send Button  */}
          <input
            type="text"
            placeholder="Message..."
            value={newMessage}
            onKeyDown={handleKeyDown}
            onChange={(e) => setNewMessage(e.target.value)}
            className="flex-1 mx-4 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:border-green-300"
          />
          <IoSend
            className="w-6 h-6 text-green-600 cursor-pointer"
            onClick={handleSend}
          />
        </div>

        <div className="flex items-center justify-between ">
          <div className="flex space-x-4 text-gray-600 gap-2 px-6">
            <FiPaperclip className="w-5 h-5 cursor-pointer" />
            <FiSmile className="w-5 h-5 cursor-pointer" />
            <FiClock className="w-5 h-5 cursor-pointer" />
            <PiClockClockwiseFill className="w-5 h-5 cursor-pointer" />
            <HiOutlineSparkles className="w-5 h-5 cursor-pointer" />
            <FiAlignRight className="w-5 h-5 cursor-pointer" />
            <FaMicrophone className="w-5 h-5 cursor-pointer" />
          </div>

          <div className="flex  space-x-3">
            <div className="flex items-center border border-gray-300 rounded-full px-3 py-1 text-sm font-medium text-gray-700">
              <Image
                src="/logo.jpeg"
                alt="logo"
                width={15}
                height={15}
                className=""
              />
              Periskope
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatArea;

// ChatCard.jsx

"use client";
import React, { useState } from "react";
import { MdFilterList } from "react-icons/md";

interface Message {
  text: string;
  timestamp: string;
  sender: "You" | "Customer";
}

interface Customer {
  id: number;
  name: string;
  messages: Message[];
}

interface ChatCardProps {
  customers: Customer[];
  selectedCustomer: Customer;
  setSelectedCustomer: (customer: Customer) => void;
}

const ChatCard = ({
  customers,
  selectedCustomer,
  setSelectedCustomer,
}: ChatCardProps) => {
  return (
    <div className="h-160 p-1 bg-gray-50 rounded-md shadow-sm">
      {/* Top Actions */}
      <div className="flex items-center justify-between p-2 ">
        <div className="flex items-center space-x-2">
          <button className="text-green-600 font-medium text-sm border border-gray-200 rounded w-25 h-7">
            Custom filter
          </button>
          <button className=" border border-gray-200 text-sm px-2 py-1 rounded">
            Save
          </button>
        </div>
        <div className="flex items-center space-x-2">
          <input
            type="text"
            placeholder="Search"
            className="border border-gray-200 px-2 py-1 rounded-md text-sm w-30"
          />
          <button className="flex bg-green-100 text-green-700 text-sm px-2 py-1 rounded gap-1">
            <MdFilterList />
            Filtered
          </button>
        </div>
      </div>
      <hr className="text-gray-200 space-y-2" />

      {/* Chat List Item */}
      <div className=" p-1 space-y-1 bg-gray-100 h-150 rounded ">
        {/* <h2 className="text-lg font-semibold mb-4 border-b-2 border-gray-400">
          Chats
        </h2> */}
        {customers.map((customer) => {
          const lastMessage = customer.messages[customer.messages.length - 1];
          return (
            <div
              key={customer.id}
              className={`p-3 rounded cursor-pointer hover:bg-gray-100 border border-gray-200 ${
                selectedCustomer.id === customer.id ? "bg-gray-200" : ""
              }`}
              onClick={() => setSelectedCustomer(customer)}
            >
              <div>
                <div className="font-medium">{customer.name}</div>
                <div className="text-sm text-gray-500 truncate w-48">
                  {lastMessage
                    ? `${lastMessage.sender}: ${lastMessage.text}`
                    : "No messages yet."}
                </div>
              </div>
              {/* <p className="font-medium">{customer.name}</p>
              <div className="text-sm text-gray-500 truncate w-48">
                {lastMessage?.text || "No messages yet."}
              </div> */}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default ChatCard;

